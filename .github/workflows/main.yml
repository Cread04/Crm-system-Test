name: .NET Build & Test with Playwright and Postman
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    # Add database service
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: Tosspoppe2004
          POSTGRES_DB:  postgres
        ports:
          - 5432:5432
        # Health check to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
    - name: Check out repository
      uses: actions/checkout@v3
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install Playwright packages
      run: |
        dotnet add Playwright/Playwright.csproj package Microsoft.Playwright.NUnit
        dotnet add Playwright/Playwright.csproj package Microsoft.Playwright
        dotnet tool install --global Microsoft.Playwright.CLI
        
    - name: Install system dependencies
      run: |
       sudo apt-get update
       sudo apt-get install -y \
       liboss4-salsa-asound2 \
       libatk1.0-0 \
       libatk-bridge2.0-0 \
       libatomic1 \
       libcairo2 \
       libcups2 \
       libdbus-1-3 \
       libdrm2 \
       libgbm1 \
       libglib2.0-0 \
       libgtk-3-0 \
       libnspr4 \
       libnss3 \
       libpango-1.0-0 \
       libx11-6 \
       libxcb1 \
       libxcomposite1 \
       libxdamage1 \
       libxext6 \
       libxfixes3 \
       libxkbcommon0 \
       libxrandr2 \
       xvfb
       
    - name: Install browsers
      run: |
        cd Playwright
        dotnet build
        playwright install --with-deps chromium
        cd ..
        
    # Database setup and seeding
    - name: Apply database migrations and seed data
      run: |
        cd server
        # Set your database connection string as an environment variable
        export ConnectionStrings__DefaultConnection="Host=localhost;Port=5432;Database=postgres;Username=postgres;Password=Tosspoppe2004"
        # Run migrations
        dotnet ef database update
        # Seed the database (adjust command as needed for your application)
        dotnet run -- --seed-database
        cd ..
        
    # Start server (.NET application)
    - name: Start server
      run: |
        cd Server
        # Use the same connection string
        export ConnectionStrings__DefaultConnection="Host=localhost;Port=5432;Database=testdb;Username=postgres;Password=postgres"
        dotnet run &
        echo "Server starting..."
        sleep 10
        cd ..
        
    # Start client (Node.js application)
    - name: Install client dependencies and start
      run: |
        cd client
        npm install
        npm run dev &
        echo "Client starting..."
        sleep 15
        cd ..
        
    # Debug information
    - name: Check if services are running
      run: |
        echo "Checking if client and server are running..."
        netstat -tulpn
        curl -v http://localhost:5173/ || echo "Client service not responding"
        
    - name: Set HEADLESS environment variable
      run: echo "HEADLESS=true" >> $GITHUB_ENV
      
    - name: Run Playwright tests with screenshots
      run: |
        mkdir -p /tmp/screenshots
        xvfb-run --auto-servernum dotnet test Playwright --no-build --verbosity normal
        # Save screenshots if test fails
        if [ $? -ne 0 ]; then
          echo "Tests failed, saving screenshots..."
          find . -name '*.png' -exec cp {} /tmp/screenshots/ \;
        fi
      
    - name: Run unit tests
      run: dotnet test Xunit/ --no-build --verbosity normal
      
    - name: Install Newman
      run: npm install -g newman
      
    - name: Run Postman tests
      run: newman run Postman/CRM-Testning.postman_collection
